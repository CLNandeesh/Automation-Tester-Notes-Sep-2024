Selenium Contents
=================
1. Introduction
2. Setup and Installation 
3. Browser Invocation
4. Locators
	CSS Selector
	Xpath
5. FindElement vs FindElements
6. Navigate Methods
7. Dropdown
	Static dropdown
	Dynamic dropdown
	Auto suggestive dropdown
8. Checkbox and Radio button
9. Alerts  or Popup
10. 

Sample URL:
https://rahulshettyacademy.com/locatorspractice/
https://testautomationpractice.blogspot.com/
https://www.countries-ofthe-world.com/flags-of-the-world.html
https://davidwalsh.name/demo/multiple-file-upload.php
https://rahulshettyacademy.com/AutomationPractice/

Exceptions:
1. org.openqa.selenium.NoSuchElementException
Cause: 
	Cannot able to identify element with specified locator[Wrong locator] 
	Synchronization issue
Solution: 
	Check locator
	Add Synchronization

2. org.openqa.selenium.ElementClickInterceptedException
Cause: 
	Could not able to click on specific element because it may be hidden by other element 
        JS code cannot be executed directly by selenium 
        Application may be changing the view
Solution: 
	Use JavaScript executor or Action class click()
	Add Synchronization to make it to stable state

3. org.openqa.selenium.InvalidSelectorException
Cause:
	Invalid syntax of Locators
*******************************************************************************************************************************************************
Introduction
============

Selenium Features
-----------------
->Open source
->Used to automate Web based application
->Supports multiple browsers like Chrome, Firefox, Internet Explorer, Safari
->Works on multiple platform like Windows, Apple OS X, Linux
->Can be codded in multiple language like Java, Python, JavaScript, Php, Ruby,...

Selenium VS Web driver
----------------------
->Selenium is suite of tools to automate web browsers across many platform
->Web driver is an component of Selenium suite or an API which contains collection of Classes and Interfaces which provides us methods to automate web browser

Selenium Architecture
---------------------
Selenium Client Library  <--> JSON wire protocol over HTTP <---> Browser drivers[Server] <--> Browsers   
 Java/Python/Ruby/C#

Write Selenium code using any of the language, Run the Test
Code will be converted into Json format[JSON wire protocol over HTTP] and send to Browser driver[Server] over HTTP protocol
Browser driver executes it on real browser and get back the response
Browser driver send back the response to Client

WebDriver Hierarchy
-------------------

                          SearchContext[I]

                           WebDriver[I]
          
                        RemoteWebDriver[C]

       ChromiumDriver[C]                   FirefoxDriver[C] ....
ChromeDriver[C] EdgeDriver[C]

*******************************************************************************************************************************************************
Setup and Installation 
======================
Download, Install and Set Java home path in System variables
-----------------------------------------------------------
->Download JDK [LTS] ->17 version [64 msi installer]
->Install it in C driver
->Copy home path [not bin]->Go to System environment variables and add it 
  Key: JAVA_HOME
  value: Copied home path
->Copy bin path ->Go to System environment variables and add it
  Select path, Click on Edit and add it
->To check its installed or not
  java -version


Download, Install Eclipse
-------------------------
->Download Eclipse IDE for Java Developers and Extract the zip
->Create Workspace and launch 
->Create maven project
Group ID: org.apache.maven.archetypes
Artifact ID: maven-archetype-quickstart
->Add dependencies

Selenium:
<!-- https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java -->
<dependency>
    <groupId>org.seleniumhq.selenium</groupId>
    <artifactId>selenium-java</artifactId>
    <version>4.24.0</version>
</dependency>

Test NG:
<!-- https://mvnrepository.com/artifact/org.testng/testng -->
<dependency>
    <groupId>org.testng</groupId>
    <artifactId>testng</artifactId>
    <version>7.10.2</version>
    <scope>test</scope>
</dependency>

*******************************************************************************************************************************************************
Browser Invocation
==================
Methods
-------
WebDriver driver=new ChromeDriver(); //Opens Chrome browser
WebDriver driver=new FirefoxDriver(); //Opens Firefox browser
WebDriver driver=new EdgeDriver(); //Opens Edge browser

Package
--------
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;

Points:
WebDriver driver=new ChromeDriver(); //Upcasting
->If we declare in this way then by using driver object reference we can access only WebDriver interfaces methods not browser classes methods so we can use same code to run in any browsers. 
->Cross platform execution

WebDriver driver=new ChromeDriver(); //Upcasting
 Using driver object reference we can access only WebDriver interfaces methods not browser classes methods
ChromeDriver driver=new ChromeDriver();
 Using driver object reference we can access both WebDriver interfaces methods and browser classes methods

->Selenium manager will check if we explicitly specified browser.exe path or not, if not given it itself download the appropriate browser.exe version.
->Introduced from Selenium 4.6.0

System.setProperty("webdriver.chrome.driver","path of exe file");
WebDriver driver=new ChromeDriver();

webdriver.gecko.driver
webdriver.edge.driver

OR
WebDriver driver=new ChromeDriver(); //Selenium manager will download

Ex:
import java.time.Duration;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;

public class InvokeBrowser {

	public static void main(String[] args) {
		
		String browser="edge";
		WebDriver driver=null;
		
		if(browser.equalsIgnoreCase("chrome"))
		{
			driver=new ChromeDriver();
		}
		else if(browser.equalsIgnoreCase("firefox"))
		{
			driver=new FirefoxDriver();
		}
		 
		else
		{
			driver=new EdgeDriver();
		}
		
		driver.manage().window().maximize();
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(5));
		driver.get("https://www.google.com");
		System.out.println("Title is: "+driver.getTitle());
		
		driver.quit();

	}

}

*******************************************************************************************************************************************************
Locators
========
->Way to identify HTML elements on a web page
->Static method present in By class
->To get group of Webelements, then we can use className() and tagName()

Basic Locators
--------------
id()/name()/linkText()/className()/tagName()/partialLinkText()

Customized Locators
-------------------
cssSelector()/xpath()

Ex: 
WebElement element=driver.findElement(By.name("search"));  //Identify single first element
List<WebElement> elements=driver.findElements(By.className("searchAll")); //Identify multiple elements

Ex:
import java.util.List;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

public class Demo1 {

	public static void main(String[] args) {

	WebDriver driver = new ChromeDriver();
        driver.get("https://demo.opencart.com/");
        driver.manage().window().maximize();

        WebElement ele=driver.findElement(By.name("search"));
        ele.sendKeys("Mobile");

        List<WebElement> elements=driver.findElements(By.className("nav-item"));
        elements.forEach(x->System.out.println(x.getText()));
        
        driver.quit();

	}

}

OUTPUT:
Desktops
Laptops & Notebooks
Components
Tablets
Software
Phones & PDAs
Cameras
MP3 Players

Ex: To get all images src attribute value
import java.util.List;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

public class Demo2 {

	public static void main(String[] args) {
		WebDriver driver = new ChromeDriver();
        driver.get("https://demo.opencart.com/");
        driver.manage().window().maximize();

        List<WebElement> images = driver.findElements(By.tagName("img"));
        images.stream().map(x -> x.getAttribute("src")).forEach(x -> System.out.println(x));

        driver.quit();
	}

}

OUTPUT:
https://demo.opencart.com/image/catalog/opencart-logo.png
https://demo.opencart.com/image/cache/catalog/demo/banners/iPhone6-1140x380.jpg
https://demo.opencart.com/image/cache/catalog/demo/banners/MacBookAir-1140x380.jpg
https://demo.opencart.com/image/cache/catalog/demo/macbook_1-200x200.jpg


Compound class names
--------------------
->If we have 2 or more class names then we can use any one

Ex:
<button class="submit signInBtn" type="submit">Sign In</button>

Both will work fine
driver.findElement(By.className("signInBtn")).click();
driver.findElement(By.className("submit")).click();

*******************************************************************************************************************************************************
CSS Selector
============
Ex: WebElement element=driver.findElement(By.cssSelector(""));

Generic Syntax
--------------
tagName#idName
tagName.className
tagName[attName='attValue']
tagName.className[attName='attValue']

->tagName is optional
#idName
.className

CSS selector for Compound class name
------------------------------------
Ex: <button class="submit signInBtn" type="submit">Sign In</button>
button.submit
button.signInBtn
.submit
button[class='submit signInBtn']

Index in CSS Selector
---------------------
cssSelector:nth-child(index value)
Ex: input[type='text']:nth-child(5)

Parent to child traverse in CSS Selector
----------------------------------------
parentCssselector childCssselector
Ex: form[action='#'] p

Regular expression in CSS Selector
----------------------------------
tagname[attributeName*='partial attribute value']

*******************************************************************************************************************************************************
Xpath
=====
Ex: WebElement element=driver.findElement(By.xpath(""));

Hierarchy
---------
/ current child hierarchy
// all child hierarchy

Types
-----
->Absolute: 
Starts with html 
Starts with/
Do not use attributes
Not stable

->Relative: 
Direct to element
Starts with //
Uses attributes
Stable

Generic Syntax
--------------
//tagName[@attName='attvalue']
//tagName[@attName='attvalue'][@attName='attvalue']
//*[@attName='attvalue']
//tagName[@attName='attvalue' and @attName='attvalue']
//tagName[@attName='attvalue' or @attName='attvalue']
//tagName[text()='anyInnerText']
//tagName[starts-with(@attName,'partialAttValue')]
//tagName[ends-with(@attName,'partialAttValue')]
//tagName[contains(@attName,'partialAttValue')]
//tagName[contains(text(),'partialInnerTextValue')]

Index in Xpath
--------------
(xpath)[index value]
Index starts from 1
Ex:(//input[@type='text'])[1]

Chained Xpath
-------------
->No attributes or inner text for an element then need to come from parent
->Go to parent and come to child
parent
 child1
  child2 

parentXpathwithAttribute/child1tagName/child2TagName

Xpath Axes
----------
->father and grand parents
ancestor::

Syntax:
xpath/ancestor::ancestorXpath or ancestorTagname

->child and grand children
descendant::
//

Syntax:
xpath/descendant::descendantXpath or descendantTagname
xpath//descendantXpath or descendantTagname

->Immediate brother, same parent other children
preceding-sibling::
following-sibling::

Syntax:
xpath/preceding-sibling::followingSiblingXpath or followingSiblingTagname
xpath/following-sibling::precedingSiblingXpath or precedingSilingTagname

This is also allowed
xpath/following-sibling::precedingSiblingXpath or precedingSilingTagname/following-sibling::precedingSiblingXpath or precedingSilingTagname
Ex://button[text()='Login']/preceding-sibling::button/preceding-sibling::a

->brothers, same or different parents other children [same hierarchy] 
preceding::
following::

Syntax:
xpath/preceding::precedingSiblingXpath or precedingSilingTagname
xpath/following::followingSiblingXpath or followingSiblingTagname


->Parent to Child or Child to Parent
parent::
child::

Syntax:
Child to Parent
childXpath/parent::parentXpath or parentTagname

Parent to child
parentXpath/child::childXpath or childTagname


Ex 1: Grand Children [descendant]
form
  div
  div
    input
    span

Identify span from form
formXpath/div[2]/span
formXpath/*/span
formXpath/descendant::span
formXpath//span

Ex 2: Grand Children [descendant]
a1
a2
a3
  a31
  a32
  a33

Need to go to a33 from a1
a1//a33


Ex: Ancestor 
form
  div
  div
    input
    span

span/ancestor::form    //form will be identified
span/ancestor::*       //div will be identified since its first ancestor

Either one Xpath
-----------------
xpath1|xpath2|xpath3

first()/last()
--------------
->Used as index
->To find first or last of all current identified elements
xpath/following::input[2]
xpath/following::input[last()]
xpath/following::input[first()]


Ex:
import java.time.Duration;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.Assert;

public class RS_InvalidCredLoginTest {
	public static void main(String[] args) throws InterruptedException {
		String email="punith rajkumar";
		WebDriver driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(5));
		
		driver.get("https://rahulshettyacademy.com/locatorspractice/");
		driver.findElement(By.id("inputUsername")).sendKeys(email);
		driver.findElement(By.name("inputPassword")).sendKeys("appu123");
		driver.findElement(By.className("signInBtn")).click();
		String message=driver.findElement(By.cssSelector("p.error")).getText();
		driver.findElement(By.linkText("Forgot your password?")).click();
		driver.findElement(By.xpath("//input[@placeholder='Name']")).sendKeys("appu");
		driver.findElement(By.xpath("(//input[@type='text'])[2]")).sendKeys(email);
		driver.findElement(By.xpath("//form[@action='#']/input[3]")).sendKeys("9916454100");
		driver.findElement(By.cssSelector("button[class='reset-pwd-btn']")).click();
		String passwordMessage=driver.findElement(By.cssSelector("form[action='#'] p")).getText();
		String s1[]=passwordMessage.split("'");
		String s2[]=s1[1].split("'");
		driver.findElement(By.xpath("//button[text()='Go to Login']")).click();
		driver.findElement(By.id("inputUsername")).sendKeys(email);
		driver.findElement(By.name("inputPassword")).sendKeys(s2[0]);
		driver.findElement(By.cssSelector("input[value*='rmbrUsername']")).click();
		driver.findElement(By.cssSelector("input[id*='chkboxOne']")).click();
		driver.findElement(By.className("signInBtn")).click();
		String t1=driver.findElement(By.xpath("//h2")).getText();
		Assert.assertEquals("Hello "+email+",", t1);
		String text=driver.findElement(By.xpath("//button[text()='Log Out']/preceding-sibling::p")).getText();
		Assert.assertEquals(text,"You are successfully logged in.","Something went wrong");
		driver.findElement(By.xpath("//button[text()='Log Out']")).click();
		driver.quit();	
	}
}



*********************************************************************************************************************************************************
FindElement vs FindElements
===========================
WebElement element=driver.findElement(By.name("search")).sendKeys("Mobile");
List<WebElement> elements=driver.findElements(By.className("search")).sendKeys("Mobile");

If a Locator not matching any of the Webelement
FindElement: returns NoSuchElement exception
FindElements: returns 0 elements, empty list will be created

*********************************************************************************************************************************************************
Note: The default condition that implicit wait checks is whether an element is present in the DOM. It does not check if the element is visible or clickable—just that it exists in the DOM.

*********************************************************************************************************************************************************
Navigate Methods
================
Methods
-------
driver.navigate().to("url");
driver.navigate().back();
driver.navigate().forward();
driver.navigate().refresh();


public class NavigatemethodsDemo {
    public static void main(String[] args) {
        WebDriver driver = new ChromeDriver();
        driver.manage().window().maximize();

        driver.get("https://www.google.com");
        driver.navigate().to("https://www.facebook.com");
        driver.navigate().back();
        driver.navigate().forward();
        driver.navigate().refresh();
        driver.quit();

    }
}

Difference between get() and navigate().to()
--------------------------------------------
get()
->waits for page to load while opening
->parameter only string 

navigate().to()
->internally calls get(), by converting object format to string format if url is of form object type
->acceps url in string and url class reference

URL url=new URL("https://www.google.com");
driver.navigate().to(url);

********************************************************************************************************************************************************
Dropdown
========

Types
-----
Select or Static Dropdown
Dynamic dropdown
Auto suggestive dropdown

Select OR Static Dropdown
-------------------------
->It has Select tag

Methods:
Select select = new Select(WebElement);

select.selectByValue("Blue");       //RT: void
select.selectByIndex("Blue");       //RT: void and index starts from 0
select.selectByVisibleText("Blue"); //RT: void

select.getFirstSelectedOption(); //RT: WebElement
select.getOptions(); //RT: List<WebElement>

select.isMultiple(); //to check is it multi selected or not RT:Boolean

Ex: Single select dropdown
package dropdowns;

import java.time.Duration;
import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.Select;

public class SelectDropdownDemo {

	public static void main(String[] args) {

		WebDriver driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(5));
		
		driver.get("https://rahulshettyacademy.com/dropdownsPractise/");
		
		WebElement element=driver.findElement(By.xpath("//select[contains(@id,'ctl00_mainContent_DropDown')]"));

		Select select=new Select(element);
		select.selectByValue("INR");
		
		WebElement e=select.getFirstSelectedOption();
		System.out.println("Selected element is: "+e.getText());
		
		System.out.println("Options are: ");
		List<WebElement> list=select.getOptions();
		list.stream().map(x->x.getText()).forEach(x->System.out.println(x));
		
	   System.out.println("Is it Multiple Select: "+select.isMultiple());
	 
	   driver.quit();
	}
}

OUTPUT:
Selected element is: INR
Options are: 
Select
INR
AED
USD
Is it Multiple Select: false

Ex: Multi select dropdown
public class MultiSelectDemo {
    public static void main(String[] args) throws InterruptedException {
        WebDriver driver = new ChromeDriver();
        driver.manage().window().maximize();
        driver.get("https://jquery-az.com/boots/demo.php?ex=63.0_2");
        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(5));

        //Multi Select
        try {
            Select s = new Select(driver.findElement(By.id("option-droup-demo")));
            System.out.println(s.isMultiple());

            List<WebElement> l = s.getAllSelectedOptions();
            l.stream().map(x -> x.getText()).forEach(x -> System.out.println("Multi Value is: " + x));

            s.deselectAll();

            List<WebElement> l2 = s.getAllSelectedOptions();
            l2.stream().map(x -> x.getText()).forEach(x -> System.out.println("Multi Value is: " + x));

            List<WebElement> li = s.getOptions();
            li.stream().map(x -> x.getText()).forEach(x -> System.out.println("Value is:" + x));
        } catch (Exception e) {
            System.out.println(e);
        }

        Thread.sleep(5000);
        driver.quit();
    }
}

Dynamic dropdown
------------------
->Identify xpath of ay specific element
->Update the string value in xpath dynamically and use it to perform action on it.

Ex: Xpath of specific Webelement
//input[@value='Java']

String text="java";
String xpath=//input[@value='"+text+"']
String updatedXpath=xpath.replace(text,"C++");
Now use this new dynamic xpath

import java.time.Duration;
import java.util.Arrays;
import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

public class BootstrapDropdown {

	public static void main(String[] args) throws InterruptedException {
		WebDriver driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get("https://jquery-az.com/boots/demo.php?ex=63.0_2");
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(5));

		driver.findElement(By.xpath("//button[contains(@class,'multiselect')]")).click();

		// Multi Select options
		List<String> list = Arrays.asList("Oracle", "MySQL", "Java", "Python");
		String text1 = "C++";
		String xp = "//input[contains(@value,'" + text1 + "')]";
	
		for (String s : list) {
			String newXp = xp.replace(text1, s);
			System.out.println("New Xpath is: " + newXp);
			driver.findElement(By.xpath(newXp)).click();
			Thread.sleep(3000);
		}
	
		driver.quit();
	}
}


Ex 2:
import java.time.Duration;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

public class DynamicdropdownEx2 {

	public static void main(String[] args) {

		WebDriver driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get("https://rahulshettyacademy.com/dropdownsPractise/");
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(5));

		String t1="IX1";
		String t2="HYD";
		
		String sXpath = "//a[@value='"+t1+"']";
		String sXpath1 = sXpath.replace(t1, "IXI");
		
		
		String dXpath = "div[id='glsctl00_mainContent_ddl_destinationStation1_CTNR']  a[value='"+t2+"']";
		String dXpath1 =dXpath.replace(t2, "HYD");
				
		driver.findElement(By.xpath("//input[@id='ctl00_mainContent_ddl_originStation1_CTXT']")).click();
		driver.findElement(By.xpath(sXpath1)).click();
		driver.findElement(By.cssSelector(dXpath1)).click();

	}

}

Auto suggestive dropdown
-------------------------
->Click on the element
->Type the value
->Grab all the value using generic xpath
->Iterate, validate for the required option and click on it.

Ex:
import java.time.Duration;
import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

public class AutosugestiveDropdown {

	public static void main(String[] args) {
		
		WebDriver driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get("https://rahulshettyacademy.com/dropdownsPractise/");
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(5));
		
		driver.findElement(By.id("autosuggest")).click();
		driver.findElement(By.id("autosuggest")).sendKeys("india");
		
		List<WebElement> list=driver.findElements(By.xpath("//li[@class='ui-menu-item']/a"));
		
		for(WebElement w:list)
		{
			if(w.getText().equalsIgnoreCase("india"))
			{
				w.click();
				break;
			}
		}	
		
	}

}

********************************************************************************************************************************************************
Checkbox and Radio button
========================
Operation
---------
->We can perform click[enable] on check box 
->We can check is it selected or not
->We can check how many checkbox are available in the Webpage

Methods
--------
element.click()
element.isSelected()

->To check total number of checkbox in the page
  driver.findElements(By.xpath("//*[@type='checkbox']")).size();

Ex:
package basics2;

import java.time.Duration;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

public class CheckboxDemo {

	public static void main(String[] args) throws InterruptedException {

		WebDriver driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get("https://rahulshettyacademy.com/dropdownsPractise/");
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(5));

		WebElement ff = driver.findElement(By.id("familyandfriend"));
		System.out.println("Is it selected: " + ff.isSelected());
		ff.click();
		Thread.sleep(3000);
		System.out.println("Is it selected: " + ff.isSelected());

		System.out.println(
				"Total Numbe rof checkboxes are: " + driver.findElements(By.xpath("//input[@type='checkbox']")).size());

	}

}

Ex: To select all the checkboxes and count it
public class CheckboxAndRadioButtons {
    public static void main(String[] args) throws InterruptedException {
        WebDriver driver = new ChromeDriver();
        driver.manage().window().maximize();
        driver.get("https://testautomationpractice.blogspot.com/");
        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(5));

        //To select all checkbox and count it
        List<WebElement> allCheckbox = driver.findElements(By.xpath("//*[@type='checkbox']"));
        System.out.println("Total number of checkboxes: "+allCheckbox.size());
        for (WebElement checkBox : allCheckbox) {
            checkBox.click();
        }

        driver.quit();


    }
}

*********************************************************************************************************************************************************
Conditional Methods
===================
->Methods
element.isDisplayed()
element.isEnabled()
element.isSelected()

->Works on WebElements
->Returns Boolean value

isDisplayed()
To check is the element is displayed on screen or not
Ex: Logo is displayed or not

isEnabled
To check is the element is enabled or not to perform some actions
Ex: Text box is enabled or not to enter text

isSelected
To check is check box, radio button is selected or not

Ex:
public class ConditionalMethodsDemo {
    public static void main(String[] args) {
        WebDriver driver = new ChromeDriver();
        driver.get("https://demo.opencart.com/en-gb?route=account/register");
        driver.manage().window().maximize();
        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(5));

        WebElement firstNameTextbox = driver.findElement(By.id("input-firstname"));
        boolean firstNameTextboxStatus = firstNameTextbox.isEnabled();
        System.out.println("Text box is Enabled ? " + firstNameTextboxStatus);

        WebElement logo = driver.findElement(By.xpath("//img[@title='Your Store']"));
        boolean logoStatus = logo.isDisplayed();
        System.out.println("Logo is Displayed ? " + logoStatus);

        WebElement subscribeCheckbox = driver.findElement(By.xpath("//input[@id='input-newsletter']"));
        boolean subscribeCheckboxStatus = firstNameTextbox.isSelected();
        System.out.println("Subscribe Checkbox Selected - Before ? " + subscribeCheckboxStatus);
        try {
            Thread.sleep(3000);
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
        subscribeCheckbox.click();
        System.out.println("Subscribe Checkbox Selected - After ? " + subscribeCheckboxStatus);

        driver.quit();
    }
}

*********************************************************************************************************************************************************
Alerts  or Popup
================
->Window which we cannot able to identify HTML elements

Methods
---------
Alert alert=driver.switchTo().alert();
alert.accept()
alert.dismiss()
alert.sendkeys("");
alert().getText();

Types
-----
Normal Alert : It has text to enter Text displaying, Ok and Close options.
Confirmation Alert : It has Ok and Cancel options.
Prompt Alert

->Without switch command handling alert window.
Using explicit wait

Ex:
public class AlertClassDemo {
    public static void main(String[] args) throws InterruptedException {
        WebDriver driver = new ChromeDriver();
        driver.manage().window().maximize();
        driver.get("https://testautomationpractice.blogspot.com/");
        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(5));

        //Using Switch command
        driver.findElement(By.xpath("//button[text()='Prompt']")).click();
        Alert alert = driver.switchTo().alert();
        alert.sendKeys("appu boss");
        alert.accept();

        //Using Explicit wait
        driver.findElement(By.xpath("//button[text()='Prompt']")).click();
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
        Alert alert = wait.until(ExpectedConditions.alertIsPresent());
        Thread.sleep(5000);
        alert.accept();

    }
}

Authentication Popup
--------------------
->Need to provide username and password a part of url
Ex:https://the-internet.herokuapp.com/basic_auth
Ex:https://admin:admin@the-internet.herokuapp.com/basic_auth
Syntax:https://username:password@the-internet.herokuapp.com/basic_auth

Ex:
public class AuthenticationPopup {
    public static void main(String[] args) {

        WebDriver driver = new ChromeDriver();
        driver.manage().window().maximize();
        driver.get("https://admin:admin@the-internet.herokuapp.com/basic_auth");
        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(5));
    }
}

*********************************************************************************************************************************************************
